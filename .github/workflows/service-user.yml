on:
  push:
    branches:
      - main
      - master
      - dev
      - stage
permissions:
  id-token: write
  contents: read #This is required for actions/checkout@v2 tes
jobs:
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      users: ${{ steps.filter.outputs.users }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: actions/checkout@master
      - uses: dorny/paths-filter@master
        id: filter
        with:
          filters: |
            users:
              - 'product/service/**/user/**'

  native_build:
    runs-on: ubuntu-latest
    if: needs.changes.outputs.users == 'true'
    name: Deploy User Services
    steps:
      - uses: actions/checkout@master
      - uses: dorny/paths-filter@master
        id: filter
        with:
          filters: |
            user_welcome:
              - 'product/service/lambda-services/user/**'
            sam_build:
              - 'infrastructure/service-user.yaml'
      - name: Create Vars
        run: |
          echo "TENANT_NAME=minka-cloud" >> $GITHUB_ENV
          echo "GENERAL_DOMAIN=minka.cloud" >> $GITHUB_ENV
          echo "HOSTED_ZONE_ID=Z06530912SIRHBPLWQDWO" >> $GITHUB_ENV
          echo "COGNITO_DOMAIN=auth.minka.cloud" >> $GITHUB_ENV
          echo "CERTIFICATE_ARN=arn:aws:acm:us-east-1:631674088803:certificate/0dfc0ddd-8e43-4662-adad-7b55df9bd9c2" >> $GITHUB_ENV
          echo "USER_WELCOME_PATH=../product/service/lambda-services/user/welcome/target/function.zip" >> $GITHUB_ENV
          echo "DEPLOY_SAM=false" >> $GITHUB_ENV
      - name: Configuration for master branch
        if: ${{ github.ref == 'refs/heads/master' }}
        # Side note, I can run any Linux converter here, not just 'echo' original -> echo "GCP_WIP=${{ secrets.MAIN_WIP }}" >> $GITHUB_ENV
        run: |
          echo "AWS_DEFAULT_REGION=eu-west-1" >> $GITHUB_ENV
          echo "STACK_NAME=user-minka-cloud-dev" >> $GITHUB_ENV
          echo "USER_WELCOME_PATH=minka-cloud-dev-deployment" >> $GITHUB_ENV
          echo "environment=dev1" >> $GITHUB_ENV

      - name: Configuration for dev branch
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "STACK_NAME=user-minka-cloud-dev" >> $GITHUB_ENV
          echo "USER_WELCOME_PATH=minka-cloud-prod-deployment" >> $GITHUB_ENV
          echo "environment=prod1" >> $GITHUB_ENV

      #Cache target folder zip files
      - name: Cache target folder
        #if: steps.filter.outputs.user_welcome == 'true' || steps.filter.outputs.sam_build == 'true'
        id: cache-target-user
        uses: actions/cache@v3
        env:
          cache-name: cache-target-user-folder
        with:
          path: |
            **/user/**/target
          key: ${{ runner.os }}-target-user-${{ env.environment }}-${{ hashFiles('**/user/**/target/**/function.zip') }}

      - name: Cache maven modules
        if: steps.filter.outputs.user_welcome == 'true' || steps.cache-target-user.outputs.cache-hit != 'true'
        id: cache-maven
        uses: actions/cache@v3
        env:
          cache-name: cache-maven-modules
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Config graalvm
        if: steps.filter.outputs.user_welcome == 'true'  || steps.cache-target-user.outputs.cache-hit != 'true'
        uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '19'
          components: 'native-image'

      - name: Maven Clean and Verify on User Welcome Lambda
        if: steps.filter.outputs.user_welcome == 'true' || steps.cache-target-user.outputs.cache-hit != 'true'
        run: |
          mvn -f product/service/lambda-services/user/welcome/pom.xml -q install -Dnative -DskipTests
          echo "DEPLOY_SAM=true" >> $GITHUB_ENV

        # - name: Debug filter
        #   if: steps.filter.outputs.user_welcome == 'true' || steps.cache-target-user.outputs.cache-hit != 'true'
      #  run: |
      #    echo "Filter user_welcome: ${{ steps.filter.outputs.user_welcome }}"
      #    echo "Filter sam_build: ${{ steps.filter.outputs.sam_build }}"
      #    echo "Cache hit: ${{ steps.cache-target-user.outputs.cache-hit }}"
      #    echo "DEPLOY_SAM: ${{ env.DEPLOY_SAM }}"

      - name: Configure AWS credentials
        if: env.DEPLOY_SAM == 'true'  || steps.filter.outputs.sam_build == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: "GitHubActions"
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Sam build
        if: env.DEPLOY_SAM == 'true'  || steps.filter.outputs.sam_build == 'true'
        run: |
          sam build --template infrastructure/service-user.yaml

      - name: Sam deploy
        if: env.DEPLOY_SAM == 'true' || steps.filter.outputs.sam_build == 'true'
        run: |
          sam deploy --template-file .aws-sam/build/template.yaml --resolve-s3 \
            --stack-name ${{env.STACK_NAME}} \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM \
            --parameter-overrides \
            TenantName=${{env.TENANT_NAME}} \
            GeneralDomain=${{env.GENERAL_DOMAIN}} \
            HostedZoneId=${{env.HOSTED_ZONE_ID}} \
            CognitoDomain=${{env.COGNITO_DOMAIN}} \
            CertificateArn=${{env.CERTIFICATE_ARN}} \
            Environment=${{env.environment}} \
            WelcomeFilePath=${{env.USER_WELCOME_PATH}} \

