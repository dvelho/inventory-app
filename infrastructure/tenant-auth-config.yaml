AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Shared Tenant setup auth service
#This is the template for the Cognito User Pool for the tenant
# Create a Cognito User Pool
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
# Create a Cognito User Pool Client
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
# Create a Cognito User Pool Domain
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooldomain.html
# Create a Cognito Identity Provider from Google
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identityprovider.html



Parameters:
  TenantAggregatorName:
    Type: String
    MinLength: 3
    MaxLength: 63
    #AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
    Default: "minka-cloud" #"minka.tech" #
  GeneralDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    #AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
    Default: "minka.cloud" #"minka.tech" #
  HostedZoneId:
    Type: String
    Description: The ID of the Hosted Zone for the domain
    Default: "Z06530912SIRHBPLWQDWO" #"Z012886125XSYKBOI8V6M" #
  CognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    #AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
    Default: "auth.minka.cloud" #"auth.minka.tech"  #
  Environment:
    Type: String
    Description: The environment name
    Default: "prod"
  CertificateArn:
    Type: String
    Description: The ARN of the certificate
    Default: "arn:aws:acm:us-east-1:631674088803:certificate/0dfc0ddd-8e43-4662-adad-7b55df9bd9c2" #"arn:aws:acm:us-east-1:631674088803:certificate/34706a68-bf88-41f0-8f6a-d9646b263404"

Conditions:
  IsProd: !Equals [ !Ref Environment, "prod" ]

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - "email"
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${Environment}-tenant-user-pool-${TenantAggregatorName}
      LambdaConfig:
        PreSignUp: !GetAtt  PreSignupTriggerLambda.Arn
        PostConfirmation: !GetAtt  PreSignupTriggerLambda.Arn
       # PreAuthentication: !GetAtt PreAuthenticationTriggerLambda.Arn
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: tenantId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: region
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: domain
          AttributeDataType: String
          Mutable: true
          Required: false

  UserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: "691358772610-9hpn91utmgmesledd2lidie4lq5kn9ih.apps.googleusercontent.com"
        client_secret: "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"
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${Environment}-auth-${TenantAggregatorName}
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - !Sub https://${GeneralDomain}
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
        - Google

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${Environment}.${CognitoDomain}" # !If [ isProd, !Sub "${CognitoDomain}", !Sub "${Environment}.${CognitoDomain}" ]
      UserPoolId: !Ref UserPool
      CustomDomainConfig:
        CertificateArn: !Ref CertificateArn

  UserPoolDomainRecord:
    Type: AWS::Route53::RecordSet
    #DependsOn: AuthDomainRootRecord
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref UserPoolDomain
      Type: A
      AliasTarget:
        # Do not change. Hard coded zone id for cloudformation
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt UPDomain.CloudFrontDistribution
        EvaluateTargetHealth: false

  UPDomain:
    Type: Custom::UserPoolCloudFrontDistribution
    Properties:
      # This is the lambda that will get the created cognito domain
      ServiceToken: !GetAtt GetUserPoolClientCFDistribution.Arn
      # This becomes a ResourceProperty of the event passed to lambda
      UserPoolDomain:  !Ref UserPoolDomain

  PreSignupTriggerLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt  PreSignupTriggerLambda.Arn
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !GetAtt UserPool.Arn

  PreSignupTriggerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-signup-native-${TenantAggregatorName} #../product/service/lambda-services/cognito/signup/target/function.zip
      Handler: not.used.in.provided.runtime
      Runtime: provided
      CodeUri:
        Bucket: minka-cloud-dev-deployment
        Key: product/service/lambda-services/cognito/signup/target/function.zip
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DISABLE_SIGNAL_HANDLERS: true
          TENANT_NAME: !Ref TenantAggregatorName
          TENANT_INFO_TABLE_NAME:  !Ref TenantInfoTable


  GetUserPoolClientCFDistribution:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-GetUserPoolClientCFDistribution-${TenantAggregatorName}
      Description: Look up CloudFrontDistribution of UserPoolDomain
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.7"
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          
          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
          
            # initialize our responses, assume failure by default
            response_data = {}
            response_status = cfnresponse.FAILED
          
            logger.info('Received event: {}'.format(json.dumps(event))) #'
          
            # When you get deleted, congratulate the deleter.
            if event['RequestType'] == 'Delete':
              response_status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, response_status, response_data)
              return None
          
            # Make ourselves a cognito api client
            try:
              cognito=boto3.client('cognito-idp')
            except Exception as e:
              logger.info('boto3.client failure: {}'.format(e)) #'
              cfnresponse.send(event, context, response_status, response_data)
              return None
          
            # Look up the properties of the user pool domain
            # UserPoolDomain is passed in via the event
            user_pool_domain = event['ResourceProperties']['UserPoolDomain']
            try:
              user_pool_domain_info = cognito.describe_user_pool_domain(Domain=user_pool_domain)
            except Exception as e:
              logger.info('cognito.describe_user_pool_client failure: {}'.format(e)) # appease yaml highlighting'
              cfnresponse.send(event, context, response_status, response_data)
              return None
            # Extract the pertient information
            cloudfront_distribution = user_pool_domain_info['DomainDescription']['CloudFrontDistribution']
            # Stuff the information into the response
            response_data['CloudFrontDistribution'] = cloudfront_distribution
            # Ship off the reponse
            response_status = cfnresponse.SUCCESS
            cfnresponse.send(event, context, response_status, response_data, noEcho=True)
  

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-LambdaExecutionRole-${TenantAggregatorName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricAlarm
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: !Sub "*"
              - Effect: Allow
                Action:
                  - sns:*
                Resource: !Sub "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:  "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:CreateTable
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - dynamodb:UpdateTable
                  - dynamodb:DeleteTable
                  - dynamodb:DescribeTimeToLive
                  - dynamodb:UpdateTimeToLive
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"

  TenantInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-tenants-info-${TenantAggregatorName}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  CognitoTenantAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: tenant.main.admin
      Description: Tenant admins that can manage the tenant
      UserPoolId: !Ref UserPool


  SignupSNSMessages:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-tenant-signup-messages-${TenantAggregatorName}
      DisplayName: !Sub ${Environment}-tenant-signup-messages-${TenantAggregatorName}
      Subscription:
        - Endpoint: !GetAtt PostToSlackLambda.Arn
          Protocol: lambda

  SignupFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt PostToSlackLambda.Arn
      Principal: sns.amazonaws.com

  ExampleTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref SignupSNSMessages
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sns:Publish'
            Resource: !Ref SignupSNSMessages
            Principal:
              AWS: '*'
            Condition:
              ArnLike:
                AWS:SourceArn: !Sub 'arn:aws:*:*:${AWS::AccountId}:*'

  PostToSlackLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-PostToSlackLambda-${TenantAggregatorName}
      Description: Post to Slack
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs16.x"
      Timeout: 30
      Code:
        ZipFile: |
          const https = require('https');
          exports.handler = (event, context, callback) => {
            const payload = JSON.stringify({
              text: `Message sent by ${event.name} (${event.email}):\n ${event.message}`,
            });
              
            const options = {
              hostname: "hooks.slack.com",
              method: "POST",
              path: "/services/T01TU5SKFL6/B04931U5C7K/gDRZ4AQkkxim6h8FdRUNDkt3",
            };
              
            const req = https.request(options,
              (res) => res.on("data", () => callback(null, "OK"))
            );
            req.on("error", (error) => callback(JSON.stringify(error)));
            req.write(payload);
            req.end();
          }
  

#Creates a role that allows Cognito to send SNS messages
Outputs:
  CognitoUserPoolID:
    Value: !Ref UserPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref UserPoolClient
    Description: The app client
  #HostedUIURL:
  #  Value: !Sub https://${CognitoDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=http://localhost:3000
  #  Description: The hosted UI URL

  GeneralUIURL:
    Value: !Sub https://${Environment}.${CognitoDomain}/login?client_id=${UserPoolClient}&response_type=token&scope=email+openid+phone+profile&redirect_uri=http://localhost:3000
    Description: The hosted UI URL
  UserPoolDomainTarget:
    Description: "The CloudFront distribution target for A and AAAA aliases."
    Value: !GetAtt UPDomain.CloudFrontDistribution


