AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Quarkus - quarkus-amazon-lambda-common-deployment
Parameters:
  TenantName:
    Type: String
    MinLength: 3
    MaxLength: 63
    #AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
    Default: "minka-cloud" #"minka.tech" #
Resources:
  Signup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Signup-Native-${AWS::Region}-${TenantName}
      Handler: not.used.in.provided.runtime
      Runtime: provided
      CodeUri: ../product/service/lambda-services/cognito/signup/target/function.zip
      MemorySize: 128
      Policies: AWSLambdaBasicExecutionRole
      Timeout: 15

      Environment:
        Variables:
          DISABLE_SIGNAL_HANDLERS: true

Outputs:
    Signup:
        Description: Signup Lambda Function ARN
        Value: !GetAtt Signup.Arn



    SNSRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: !Sub ${Environment}-SNSRole-${TenantName}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "cognito-idp.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "CognitoSNSPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "sns:publish"
                  Resource: "*"
        #  PreSignupTriggerLambda
        #  PreAuthenticationTriggerLambda
        #OnCognitoPreAuthenticatePermission:
        #  Type: 'AWS::Lambda::Permission'
        #  Properties:
        #    Action: "lambda:InvokeFunction"
        #    FunctionName: !GetAtt PreAuthenticationTriggerLambda.Arn
        #    Principal: "cognito-idp.amazonaws.com"
        #    SourceArn: !GetAtt UserPool.Arn

        # Create dummy a root domain for the auth app
        #AuthDomainRootRecord:
        #  Type: AWS::Route53::RecordSet
        #  Properties:
        #    HostedZoneId:  !Ref HostedZoneId
        #    Name: !Ref CognitoDomain
        #    ResourceRecords:
        #      - 127.0.0.1
        #    TTL: 900
        #    Type: A

        #PreAuthenticationTriggerLambda:
        #  Type: AWS::Lambda::Function
        #  Properties:
        #    Description: This lambda function is triggered before a user signs in
        #    FunctionName: !Sub ${Environment}-PreAuthenticationTriggerLambda-${TenantName}
        #    Handler: index.handler
        #    MemorySize: 128
        #    Role: !GetAtt LambdaExecutionRole.Arn
        #    Runtime: "nodejs16.x"
        #    Timeout: 30
        #    Code:
        #      ZipFile: |
        #        exports.handler = (event, context, callback) => {
        #            // Impose a condition that the minimum length of the username is 5 is imposed on all user pools.
        #            if (event.userName.length < 5) {
        #              var error = new Error("Cannot register users with username less than the minimum length of 5");
        #              // Return error to Amazon Cognito
        #              callback(error, event);
        #          }
        #            // Return to Amazon Cognito
        #            callback(null, event);
        #        };

        #ACMCognitoCertificate:
        # Type: "AWS::CertificateManager::Certificate"
        #Properties:
        #DomainName: !Ref GeneralDomain
        #DomainValidationOptions:
        # - DomainName: !Ref CognitoDomain
        #   HostedZoneId: !Ref HostedZoneId
        #ValidationMethod: DNS

